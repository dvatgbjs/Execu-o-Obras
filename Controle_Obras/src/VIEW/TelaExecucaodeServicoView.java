/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package VIEW;

import DAO.ExecucaoDeServicoDAO;
import DTO.ExecucaoDeServicoDTO;
import java.awt.event.ItemEvent;

import java.awt.event.ItemListener;
import DAO.ConexaoBD;
import DAO.MateriaisDAO;
import DTO.MateriaisDTO;
import VIEW.TelaListaMateriais;
import com.mysql.cj.xdevapi.Statement;

import java.sql.Connection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import java.sql.ResultSet;
import java.util.Vector;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

import javax.swing.JPopupMenu;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.sql.PreparedStatement;

import java.sql.DriverManager;
import java.util.HashSet;
import java.util.Set;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.util.OS;

/**
 *
 * @author jateixeira
 */
public class TelaExecucaodeServicoView extends javax.swing.JFrame {

    private DefaultComboBoxModel<String> modelComboBox;
    private Connection connection;
    private JComboBox<String> comboBox;
    private DefaultComboBoxModel<String> modelLocalBox;
    private DefaultComboBoxModel<String> modelLocalBox1;

    /*  private JPopupMenu popupMenu;
            private List<JCheckBox> checkBoxes;
            private List<String> selectedMaterials;*/
    /**
     * Creates new form TelaObrasView
     */
    public TelaExecucaodeServicoView() throws ClassNotFoundException, SQLException {

        initComponents();
        setLocationRelativeTo(null);
        initializeDatabaseConnection();

        // Inicializa o modelo do JComboBox
        modelLocalBox = new DefaultComboBoxModel<>();
        modelComboBox = new DefaultComboBoxModel<>();
        NomeMaterialField.setModel(modelComboBox);
        LocalBox.setModel(modelLocalBox);
        comboBox = new JComboBox<>();
        

        setupAutocomplete();
        populateComboBox();
        populateLocalBox();
        populateLocalBox1();
        

        AutoCompleteDecorator.decorate(NomeMaterialField);
        AutoCompleteDecorator.decorate(NomeMaterialField);
        AutoCompleteDecorator.decorate(LocalBox);
        AutoCompleteDecorator.decorate(LocalBox1);
        NomeMaterialField.setSelectedIndex(-1);
        LocalBox.setSelectedIndex(-1);
        LocalBox1.setSelectedIndex(-1);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jToggleButton1 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ConParametros = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        VoltarBtnObras = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        OSFieldCon = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        LocalBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        CalendarioField = new javax.swing.JFormattedTextField();
        OSFieldCad = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CodigoMaterialField = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ValorField = new javax.swing.JFormattedTextField();
        SubtotalField = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        BtnCadastroObras = new javax.swing.JButton();
        QuantidadeMaterialField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        UnidadeMedField = new javax.swing.JFormattedTextField();
        N_MedicaoField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        NomeMaterialField = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        LocalBox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Execução de Serviço");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Consulta de Execuções"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Logradouro", "Local", "Tipo", "OS", "N° Medição", "Nome Item", "Código Item", "Quantidade", "Uni. Medida", "Data", "Valor", "Subtotal"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        ConParametros.setBackground(new java.awt.Color(102, 204, 255));
        ConParametros.setText("CONSULTAR");
        ConParametros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConParametrosActionPerformed(evt);
            }
        });

        jLabel4.setText("OS:");

        VoltarBtnObras.setBackground(new java.awt.Color(153, 153, 153));
        VoltarBtnObras.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        VoltarBtnObras.setForeground(new java.awt.Color(255, 255, 255));
        VoltarBtnObras.setText("Voltar");
        VoltarBtnObras.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        VoltarBtnObras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarBtnObrasActionPerformed(evt);
            }
        });

        jButton2.setText("EXPORTAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        OSFieldCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OSFieldConActionPerformed(evt);
            }
        });

        jLabel13.setText("Local:");

        LocalBox1.setEditable(true);
        LocalBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Totalizadores");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1427, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LocalBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OSFieldCon, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(ConParametros, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(VoltarBtnObras, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConParametros)
                    .addComponent(jLabel4)
                    .addComponent(jButton2)
                    .addComponent(OSFieldCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(LocalBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(VoltarBtnObras))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastro Execução"));

        jLabel5.setText("DATA:");

        try {
            CalendarioField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        OSFieldCad.setEditable(false);
        try {
            OSFieldCad.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.##.##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        OSFieldCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OSFieldCadActionPerformed(evt);
            }
        });

        jLabel2.setText("OS:");

        jLabel6.setText("CÓDIGO ITEM:");

        CodigoMaterialField.setEditable(false);
        CodigoMaterialField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodigoMaterialFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("NOME ITEM:");

        jLabel8.setText("VALOR:");

        ValorField.setEditable(false);
        ValorField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel9.setText("SUBTOTAL:");

        BtnCadastroObras.setBackground(new java.awt.Color(102, 204, 255));
        BtnCadastroObras.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        BtnCadastroObras.setForeground(new java.awt.Color(255, 255, 255));
        BtnCadastroObras.setText("Cadastrar");
        BtnCadastroObras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCadastroObrasActionPerformed(evt);
            }
        });

        jLabel1.setText("QUANTIDADE:");

        jLabel3.setText("UNIDADE DE MEDIDA:");

        UnidadeMedField.setEditable(false);

        jLabel11.setText("N° MEDIÇÃO:");

        NomeMaterialField.setEditable(true);
        NomeMaterialField.setInheritsPopupMenu(true);
        NomeMaterialField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NomeMaterialFieldActionPerformed(evt);
            }
        });

        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/interrogaçãopqn.jpg"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        LocalBox.setEditable(true);
        LocalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalBoxActionPerformed(evt);
            }
        });

        jLabel12.setText("Local:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(LocalBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(OSFieldCad, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(N_MedicaoField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel7)
                                .addGap(11, 11, 11)
                                .addComponent(NomeMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(CodigoMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(215, 215, 215)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(QuantidadeMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(UnidadeMedField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addGap(12, 12, 12)
                                .addComponent(CalendarioField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(ValorField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SubtotalField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 108, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BtnCadastroObras, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(OSFieldCad, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(CodigoMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel7)
                            .addComponent(NomeMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocalBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)))
                    .addComponent(N_MedicaoField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CalendarioField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8)
                    .addComponent(ValorField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(SubtotalField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(QuantidadeMaterialField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(UnidadeMedField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(BtnCadastroObras)
                .addContainerGap())
        );

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pref png1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(482, 482, 482))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VoltarBtnObrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarBtnObrasActionPerformed

        TelaMenuView telamenus = new TelaMenuView();
        telamenus.setVisible(true);

        this.dispose();

    }//GEN-LAST:event_VoltarBtnObrasActionPerformed

    private void BtnCadastroObrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCadastroObrasActionPerformed
        try {
            String OS, N_medicao, NomeMaterial, CodigoMaterial, QuantidadeMaterial, UnidadeMedMaterial, Data, Valor, Subtotal;

            OS = OSFieldCad.getText();
            N_medicao = N_MedicaoField.getText();
            NomeMaterial = (String) NomeMaterialField.getSelectedItem();
            CodigoMaterial = CodigoMaterialField.getText();
            QuantidadeMaterial = QuantidadeMaterialField.getText();
            UnidadeMedMaterial = UnidadeMedField.getText();
            Data = CalendarioField.getText();
            Valor = ValorField.getText();
            Subtotal = SubtotalField.getText();

            ExecucaoDeServicoDTO servicoDto = new ExecucaoDeServicoDTO();

            servicoDto.setOS(OS);
            servicoDto.setN_medicao(N_medicao);
            servicoDto.setNomeMaterial(NomeMaterial);
            servicoDto.setCodigoMaterial(CodigoMaterial);
            servicoDto.setQuantidadeMaterial(QuantidadeMaterial);
            servicoDto.setUnidadeMedMaterial(UnidadeMedMaterial);
            servicoDto.setData(Data);
            servicoDto.setValor(Valor);
            servicoDto.setSubtotal(Subtotal);

            ExecucaoDeServicoDAO servicoDao = new ExecucaoDeServicoDAO();
            servicoDao.CadastrarExecucao(servicoDto);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        QuantidadeMaterialField.setText("");
        NomeMaterialField.setSelectedIndex(-1);
    }//GEN-LAST:event_BtnCadastroObrasActionPerformed

    private void NomeMaterialFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NomeMaterialFieldActionPerformed
      
           updateTextFields();
    }//GEN-LAST:event_NomeMaterialFieldActionPerformed

    private void ConParametrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConParametrosActionPerformed
       try{
             ListarMedicoes(); 
        }
        catch (Exception erro){
            JOptionPane.showMessageDialog(null, "não há registros identificados" + erro);
        }
    }//GEN-LAST:event_ConParametrosActionPerformed
    
    private void CodigoMaterialFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodigoMaterialFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CodigoMaterialFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            exportarParaPlanilha((String) LocalBox1.getSelectedItem(), OSFieldCon.getText());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            TelaListaMateriais telaLista = new TelaListaMateriais();
            telaLista.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void LocalBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalBoxActionPerformed
        
        updateLocal();
    }//GEN-LAST:event_LocalBoxActionPerformed

    private void OSFieldConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OSFieldConActionPerformed
        
    }//GEN-LAST:event_OSFieldConActionPerformed

    private void LocalBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalBox1ActionPerformed
        
    }//GEN-LAST:event_LocalBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       TelaTotalizadorView telauser = null;
        try {
            telauser = new TelaTotalizadorView();
        } catch (SQLException ex) {
            Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(Level.SEVERE, null, ex);
        }
       telauser.setVisible(true);
       
       this.dispose(); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void OSFieldCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OSFieldCadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OSFieldCadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TelaExecucaodeServicoView().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(TelaExecucaodeServicoView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCadastroObras;
    private javax.swing.JFormattedTextField CalendarioField;
    private javax.swing.JFormattedTextField CodigoMaterialField;
    private javax.swing.JButton ConParametros;
    private javax.swing.JComboBox<String> LocalBox;
    private javax.swing.JComboBox<String> LocalBox1;
    private javax.swing.JTextField N_MedicaoField;
    private javax.swing.JComboBox<String> NomeMaterialField;
    private javax.swing.JFormattedTextField OSFieldCad;
    private javax.swing.JTextField OSFieldCon;
    private javax.swing.JTextField QuantidadeMaterialField;
    private javax.swing.JFormattedTextField SubtotalField;
    private javax.swing.JFormattedTextField UnidadeMedField;
    private javax.swing.JFormattedTextField ValorField;
    private javax.swing.JButton VoltarBtnObras;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private void initializeDatabaseConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/projetoobras?serverTimezone=America/Sao_Paulo", "root", "1234");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            throw new SQLException("MySQL Driver not found.");
        }
    }

    private void setupAutocomplete() {
        JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent();
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateAutocomplete();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateAutocomplete();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateAutocomplete();
            }
        });
       
        
        QuantidadeMaterialField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateSubtotal();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateSubtotal();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateSubtotal();
            }
        });

        setVisible(true);
    
    }

    private void updateAutocomplete() {
        JTextField textField = (JTextField) comboBox.getEditor().getEditorComponent();
        String inputText = textField.getText();

        if (inputText == null || inputText.trim().isEmpty()) {
            modelComboBox.removeAllElements();
            populateComboBox();
            return;
        }

        Set<String> uniqueSuggestions = new HashSet<>();
        modelComboBox.removeAllElements();

        try {
            String query = "SELECT NomeItem FROM Materiais WHERE NomeItem LIKE ?";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, "%" + inputText + "%");
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                String suggestion = rs.getString("NomeItem");
                if (uniqueSuggestions.add(suggestion)) {
                    modelComboBox.addElement(suggestion);
                }
            }

            textField.setText(inputText);
            comboBox.showPopup(); // Show the suggestion list
            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating autocomplete: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateComboBox() {
        try {
            String query = "SELECT NomeItem FROM Materiais";
            PreparedStatement stmt = connection.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Assume que modelComboBox é uma instância de DefaultComboBoxModel
            DefaultComboBoxModel<String> modelComboBox = (DefaultComboBoxModel<String>) NomeMaterialField.getModel();

            while (rs.next()) {
                String item = rs.getString("NomeItem");
                boolean itemExists = false;

                // Verifica se o item já está presente no modelo
                for (int i = 0; i < modelComboBox.getSize(); i++) {
                    if (modelComboBox.getElementAt(i).equals(item)) {
                        itemExists = true;
                        break;
                    }
                }

                // Adiciona o item ao modelo se ele não existir
                if (!itemExists) {
                    modelComboBox.addElement(item);
                }
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error populating combo box: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateTextFields() {
    String selectedItem = (String) NomeMaterialField.getSelectedItem();
    if (selectedItem != null) {
        System.out.println("Selected item: " + selectedItem); // Debug: Verifique o item selecionado
        try {
            String query = "SELECT CódigoItem, ValorItem, UniMedida FROM Materiais WHERE NomeItem = ?;";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, selectedItem);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                // Preenche os text fields com os valores retornados
                CodigoMaterialField.setText(rs.getString("CódigoItem"));
                ValorField.setText(rs.getString("ValorItem"));
                UnidadeMedField.setText(rs.getString("UniMedida"));
            } else {
                // Limpar campos se não houver resultados
                System.out.println("ResultSet is empty"); // Debug: Verifique se o ResultSet está vazio
                CodigoMaterialField.setText("");
                ValorField.setText("");
                UnidadeMedField.setText("");
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating text fields: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        System.out.println("No item selected"); // Debug: Verifique se selectedItem é null
    }
} private void updateSubtotal() {
        try {
            // Obter valor do campo ValorField
            String valorText = ValorField.getText();
            double valor = valorText.isEmpty() ? 0 : Double.parseDouble(valorText);

            // Obter valor do campo QuantidadeField
            String quantidadeText = QuantidadeMaterialField.getText();
            int quantidade = quantidadeText.isEmpty() ? 0 : Integer.parseInt(quantidadeText);

            // Calcular subtotal
            double subtotal = valor * quantidade;

            // Definir o valor no campo SubtotalField
            SubtotalField.setText(String.format("%.2f", subtotal));
        } catch (NumberFormatException e) {
            // Em caso de erro na conversão, definir subtotal como 0
            SubtotalField.setText("0.00");
        }
    }
    
  

private void exportarParaPlanilha(String Endereco, String OS) throws ClassNotFoundException {
         
        ExecucaoDeServicoDAO dao = new ExecucaoDeServicoDAO();
        
        List<ExecucaoDeServicoDTO> listaConsultas = dao.ListarMedicoes(Endereco, OS); // Chamada correta
        String DocumentsTeste = "C:\\Users\\jateixeira\\Desktop\\planilhas obras\\MEDICOES.xlsx"; //ajusta o caminho p achar a planilha
        
        dao.exportarParaPlanilha(listaConsultas, DocumentsTeste);

        JOptionPane.showMessageDialog(null, "EXPORTADO COM SUCESSO!!");
    }



    private void updateLocal() {
    String selectedItem = (String) LocalBox.getSelectedItem();
    if (selectedItem != null) {
        System.out.println("Selected item: " + selectedItem); // Debug: Verifique o item selecionado
        try {
            String query = "SELECT OS FROM Obras WHERE LocalObra = ?;";
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, selectedItem);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                // Preenche os text fields com os valores retornados
                OSFieldCad.setText(rs.getString("OS"));
                
                
            } else {
                // Limpar campos se não houver resultados
                System.out.println("ResultSet is empty"); // Debug: Verifique se o ResultSet está vazio
                OSFieldCad.setText("");
                
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating text fields: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        System.out.println("No item selected"); // Debug: Verifique se selectedItem é null
    }
}
    private void populateLocalBox() {
        try {
            String query = "SELECT LocalObra FROM Obras";
            PreparedStatement stmt = connection.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Assume que modelComboBox é uma instância de DefaultComboBoxModel
            DefaultComboBoxModel<String> modelLocalBox = (DefaultComboBoxModel<String>) LocalBox.getModel();

            while (rs.next()) {
                String item = rs.getString("LocalObra");
                boolean itemExists = false;

                // Verifica se o item já está presente no modelo
                for (int i = 0; i < modelLocalBox.getSize(); i++) {
                    if (modelLocalBox.getElementAt(i).equals(item)) {
                        itemExists = true;
                        break;
                    }
                }

                // Adiciona o item ao modelo se ele não existir
                if (!itemExists) {
                    modelLocalBox.addElement(item);
                }
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error populating combo box: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void populateLocalBox1() {
        try {
            String query = "SELECT LocalObra FROM Obras";
            PreparedStatement stmt = connection.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Assume que modelComboBox é uma instância de DefaultComboBoxModel
            DefaultComboBoxModel<String> modelLocalBox = (DefaultComboBoxModel<String>) LocalBox1.getModel();

            while (rs.next()) {
                String item = rs.getString("LocalObra");
                boolean itemExists = false;

                // Verifica se o item já está presente no modelo
                for (int i = 0; i < modelLocalBox.getSize(); i++) {
                    if (modelLocalBox.getElementAt(i).equals(item)) {
                        itemExists = true;
                        break;
                    }
                }

                // Adiciona o item ao modelo se ele não existir
                if (!itemExists) {
                    modelLocalBox.addElement(item);
                }
            }

            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error populating combo box: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void ListarMedicoes() {
    ExecucaoDeServicoDAO execucaoDeServicoDAO = new ExecucaoDeServicoDAO();
    
    // Configuração do modelo da tabela
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setNumRows(0); // Limpa as linhas da tabela
    
    // Obtém o valor do campo de texto e remove espaços em branco
    
    String Endereco = (String) LocalBox1.getSelectedItem();
    String OS = OSFieldCon.getText();
    
    
    System.out.println("Valor do campo Endereco: '" + Endereco + "'");
    System.out.println("Valor do campo OS: '" + OS + "'");
    
    try {
        // Consulta os dados com base no valor de OS
        List<ExecucaoDeServicoDTO> lista = execucaoDeServicoDAO.ListarMedicoes(Endereco, OS);
        
        // Verifica se a lista está vazia
        

        // Adiciona os dados ao modelo da tabela
        for (int i = 0;i < lista.size(); i++) {
            model.addRow(new Object[]{
                lista.get(i).getEndereço(),
                lista.get(i).getLocalObra(),
                lista.get(i).getTipo(),
                lista.get(i).getOS(),
                lista.get(i).getN_medicao(),
                lista.get(i).getNomeMaterial(),
                lista.get(i).getCodigoMaterial(),
                lista.get(i).getQuantidadeMaterial(),
                lista.get(i).getUnidadeMedMaterial(),
                lista.get(i).getData(),
                lista.get(i).getValor(),
                lista.get(i).getSubtotal(),
            });
        }
        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum dado encontrado para o endereço fornecido.");
        } else {
            System.out.println("Dados encontrados: " + lista.size());
        }
    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(null, "Erro ao consultar dados: " + e.getMessage());
        e.printStackTrace();
    }
}
    
    
    /*private void ConsultarMedicoes() {
    ExecucaoDeServicoDAO execucaoDeServicoDAO = new ExecucaoDeServicoDAO();
    
    // Configuração do modelo da tabela
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setNumRows(0); // Limpa as linhas da tabela
    
    // Obtém o valor do campo de texto e remove espaços em branco
    String OS = OSFieldCon.getText();
    System.out.println("Valor do campo OS: '" + OS + "'");
    
    try {
        // Consulta os dados com base no valor de OS
        List<ExecucaoDeServicoDTO> lista = execucaoDeServicoDAO.ConsultarMedicoes(OS);
        
        // Verifica se a lista está vazia
        if (lista.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum dado encontrado para a OS fornecida.");
        } else {
            System.out.println("Dados encontrados: " + lista.size());
        }

        // Adiciona os dados ao modelo da tabela
        for (ExecucaoDeServicoDTO dto : lista) {
            model.addRow(new Object[]{
                dto.getEndereço(),
                dto.getLocalObra(),
                dto.getOS(),
                dto.getN_medicao(),
                dto.getNomeMaterial(),
                dto.getCodigoMaterial(),
                dto.getQuantidadeMaterial(),
                dto.getUnidadeMedMaterial(),
                dto.getData(),
                dto.getValor(),
                dto.getSubtotal()
            });
        }
    } catch (ClassNotFoundException e) {
        JOptionPane.showMessageDialog(null, "Erro ao consultar dados: " + e.getMessage());
        e.printStackTrace();
    }
}*/
}


